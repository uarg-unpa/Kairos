spring.application.name=kairos
# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/kairos?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email

# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=86400000

# Server Configuration
server.port=8085
server.forward-headers-strategy=framework
# Logging
logging.level.com.uarg.flow=DEBUG
logging.level.org.springframework.security=DEBUG

# ===============================
# no borrar
# # Datos de conexión
# spring.datasource.url=jdbc:mysql://localhost:3306/bdkairos?useSSL=false&serverTimezone=UTC
# spring.datasource.username=root
# spring.datasource.password=
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# spring.jpa.properties.hibernate.format_sql=true
# # --- Puerto del servidor ---
# server.port=8080

# # Clave secreta para firmar tokens JWT (cambiá esta por algo más seguro en producción)
# app.jwt.secret=MiClaveSecretaMuySegura12345
# # Tiempo de expiración del token (ms) -> 1 hora
# app.jwt.expiration=3600000
# # ===============================
# # GOOGLE OAUTH2 CONFIG
# # ===============================
# spring.security.oauth2.client.registration.google.client-id=TU_CLIENT_ID.apps.googleusercontent.com
# spring.security.oauth2.client.registration.google.client-secret=TU_CLIENT_SECRET
# spring.security.oauth2.client.registration.google.scope=openid,profile,email
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
# spring.security.oauth2.client.registration.google.client-name=Google

# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub

